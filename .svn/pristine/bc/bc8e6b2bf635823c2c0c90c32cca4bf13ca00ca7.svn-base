<template>
  <div v-if="showForm">
    <div class="title-box">
      <span class="point-box"></span><span class="title">{{ title }}</span>
      <el-divider></el-divider>
    </div>
    <!--表单-->
    <div class="title-box" style="font-size: 14px">
      <span class="point-box"></span><span class="title">基本情况</span>
      <el-form
        :model="taskForm"
        :rules="rules"
        ref="taskForm"
        label-width="120px"
        class="demo-ruleForm"
        label-position="right"
        style="margin-top: 20px"
      >
        <el-col :span="8">
          <el-form-item label="任务名称:" prop="name">
            <el-input v-model="taskForm.name" placeholder="请填写"></el-input>
          </el-form-item>
        </el-col>
        <el-col :span="8">
          <el-form-item label="任务类型:" prop="type">
            <el-select v-model="taskForm.type" placeholder="请选择">
              <el-option
                v-for="item in selectOptions.typeList"
                :key="item.dictSort"
                :label="item.dictLabel"
                :value="item.dictValue"
              ></el-option>
            </el-select>
          </el-form-item>
        </el-col>

        <el-col :span="8">
          <el-form-item label="抄送:">
            <el-input
              v-model="taskForm.usersToCarbonCopy"
              placeholder="请填写"
            ></el-input>
          </el-form-item>
        </el-col>

        <el-col :span="24">
          <el-form-item label="任务说明:" prop="explain">
            <el-input
              type="textarea"
              v-model="taskForm.explain"
              placeholder="请填写"
            ></el-input>
          </el-form-item>
        </el-col>

        <el-col :span="8">
          <el-form-item label="创建部门:" prop="deptId">
            <el-select
              v-model="taskForm.deptId"
              placeholder="请选择负责人"
              filterable
              remote
              :remote-method="handleRemoteDept"
            >
              <el-option
                v-for="user in selectOptions.deptList"
                :key="user.deptId"
                :label="user.deptName"
                :value="user.deptId"
              >
              </el-option>
            </el-select>
          </el-form-item>
        </el-col>
        <el-col :span="8">
          <el-form-item label="责任人:" prop="chargeUserId">
            <el-select
              v-model="taskForm.chargeUserId"
              placeholder="请选择负责人"
              filterable
              remote
              :remote-method="handleRemoteUser"
            >
              <el-option
                v-for="user in selectOptions.systemUserOptions"
                :key="user.userId"
                :label="user.nickName"
                :value="user.userId"
              >
              </el-option>
            </el-select>
          </el-form-item>
        </el-col>
        <el-col :span="8">
          <el-form-item label="状态:" prop="status">
            <el-select v-model="taskForm.status" disabled placeholder="请选择">
              <el-option
                v-for="item in selectOptions.statusList"
                :key="item.dictSort"
                :label="item.dictLabel"
                :value="item.dictValue"
              ></el-option>
            </el-select>
          </el-form-item>
        </el-col>

        <el-col :span="8">
          <el-form-item label="创建时间:" prop="createTime">
            <el-date-picker
              v-model="taskForm.createTime"
              type="datetime"
              placeholder="选择日期时间"
              value-format="yyyy-MM-dd HH:mm:ss"
            >
            </el-date-picker>
          </el-form-item>
        </el-col>
        <el-col :span="8">
          <el-form-item label="任务开始时间:" prop="startTime">
            <el-date-picker
              v-model="taskForm.startTime"
              type="datetime"
              placeholder="选择日期时间"
              value-format="yyyy-MM-dd HH:mm:ss"
            >
            </el-date-picker>
          </el-form-item>
        </el-col>
        <el-col :span="8">
          <el-form-item label="任务结束日期:" prop="endTime">
            <el-date-picker
              v-model="taskForm.endTime"
              type="datetime"
              placeholder="选择日期时间"
              value-format="yyyy-MM-dd HH:mm:ss"
            >
            </el-date-picker>
          </el-form-item>
        </el-col>
      </el-form>
    </div>
    <!--表格-->
    <div class="title-box" style="font-size: 14px">
      <span class="point-box"></span><span class="title">任务划分</span>
      <el-table
        :data="tableData"
        style="width: 95%; margin: 20px auto"
        row-key="code"
        border
        lazy
        :load="load"
        :tree-props="{
          children: 'childrenTaskInstanceList',
          hasChildren: 'isParent',
        }"
      >
        <el-table-column prop="index" label="序号" width="60" align="center">
        </el-table-column>
        <el-table-column prop="name" label="子任务名称" align="center">
        </el-table-column>
        <el-table-column prop="startTime" label="开始日期" align="center">
        </el-table-column>
        <el-table-column prop="endTime" label="限办日期" align="center">
        </el-table-column>
        <el-table-column prop="address" label="预期效果" align="center">
        </el-table-column>
        <el-table-column prop="chargeUserId" label="负责人" align="center">
        </el-table-column>
        <el-table-column label="附件" align="center"> </el-table-column>
        <el-table-column label="状态" align="center">
          <template slot-scope="scope">{{
            getStatus(scope.row.status)
          }}</template>
        </el-table-column>
        <el-table-column label="操作" align="center">
          <template slot-scope="scope">
            <el-button
              v-if="scope.row.id"
              size="mini"
              type="danger"
              @click="handleDelete(scope.row)"
              >删除</el-button
            >
            <el-button
              v-else
              size="mini"
              type="primary"
              @click="handleAdd(scope.row)"
              >新增</el-button
            >
          </template>
        </el-table-column>
      </el-table>
    </div>

    <div class="title-box" style="font-size: 14px">
      <span class="point-box"></span><span class="title">任务办理情况</span>
      <el-form
        :model="taskForm"
        :rules="rules"
        ref="taskForm"
        label-width="120px"
        class="demo-ruleForm"
        style="margin-top: 20px"
      >
        <el-col :span="24">
          <el-form-item label="情况汇报:" prop="explain">
            <el-input
              type="textarea"
              v-model="taskForm.report"
              placeholder="请填写"
            ></el-input> </el-form-item
        ></el-col>
        <el-col :span="24">
          <el-form-item label="附件:">
            <el-select
              v-model="taskForm.fileUrlJson"
              placeholder="请选择活动区域"
            >
              <el-option label="区域一" value="shanghai"></el-option>
              <el-option label="区域二" value="beijing"></el-option>
            </el-select>
          </el-form-item>
        </el-col>
        <el-col :span="12">
          <el-form-item prop="date1" label="申请调整:">
            <el-input placeholder="请填写" v-model="taskForm.date1"></el-input>
          </el-form-item>
        </el-col>
        <el-col :span="12">
          <el-form-item prop="date2" label="调整期限:">
            <el-time-picker
              placeholder="选择时间"
              v-model="taskForm.date2"
              style="width: 100%"
            ></el-time-picker>
          </el-form-item>
        </el-col>
      </el-form>
    </div>

    <div class="title-box" style="font-size: 14px">
      <span class="point-box"></span><span class="title">审批结果</span>
      <el-form
        ref="approveForm"
        style="margin-top: 20px"
        :model="approveForm"
        label-width="120px"
      >
        <el-form-item label="审批意见:">
          <el-input
            type="textarea"
            v-model="approveForm.content"
            placeholder="请填写"
          ></el-input>
        </el-form-item>
      </el-form>
    </div>

    <div style="text-align: center; margin-top: 20px">
      <el-button type="primary" @click="saveTask('taskForm')"
        >暂存任务</el-button
      >
      <el-button @click="sendTask('taskForm')">下发任务</el-button>

      <el-button type="primary" @click="editTask('taskForm')"
        >修改任务</el-button
      >
      <el-button type="primary" @click="startTask('taskForm')">启动</el-button>
      <el-button @click="stopTask('taskForm')">终止任务</el-button>
      <!--      <el-button type="primary" @click="handleTask('taskForm')"-->
      <!--        >处理任务</el-button-->
      <!--      >-->
      <el-button @click="passTask('approveForm')">通过</el-button>
      <el-button @click="dispassTask('approveForm')">不通过</el-button>
      <el-button type="primary" @click="submitTask('taskForm')"
        >提交任务</el-button
      >
    </div>
  </div>
</template>

<script>
import {
  queryTaskDetail,
  queryTableList,
  insertTask,
  listSystemUser,
  queryDept,
  updateTask,
  deleteTask,
  controlTask,
  queryAuth,
  examineTask,
} from "@/api/taskProcess";
import eventBus from "@/utils/eventBus";
export default {
  name: "taskForm",
  props: {
    tabDictValue: {
      require: true,
      type: String,
    },
    selectOptions: {
      type: Object,
    },
  },
  data() {
    return {
      title: "",
      showForm: true, //控制表单显示
      taskForm: {
        status: "",
        name: "",
        deptId: "",
        type: "",
        explain: "",
        startTime: "",
        createTime: "",
        endTime: "",
        chargeUserId: "",
      },
      rules: {
        name: [{ required: true, message: "请填写", trigger: "blur" }],
        deptId: [{ required: true, message: "请选择", trigger: "change" }],
        type: [{ required: true, message: "请选择", trigger: "change" }],
        explain: [{ required: true, message: "请填写", trigger: "blur" }],
        startTime: [{ required: true, message: "请选择", trigger: "change" }],
        createTime: [{ required: true, message: "请选择", trigger: "change" }],
        endTime: [{ required: true, message: "请选择", trigger: "change" }],
        chargeUserId: [
          { required: true, message: "请选择", trigger: "change" },
        ],
      },
      tableData: [],

      approveForm: {
        content: undefined,
      },
      parentCode: "",
    };
  },
  methods: {
    handleQueryAuth(code) {
      queryAuth(code).then((res) => {
        console.log(res);
      });
    },
    handleRemoteUser(value) {
      listSystemUser({ nickName: value }).then((res) => {
        this.selectOptions.systemUserOptions = res.rows;
      });
    },
    handleRemoteDept(value) {
      queryDept({ deptName: value }).then((res) => {
        this.selectOptions.deptList = res;
      });
    },
    getStatus(val) {
      let res = this.selectOptions.statusList.find((item) => {
        // console.log(typeof item.dictValue);
        if (item.dictValue == val) {
          return item;
        }
      });
      return res ? res.dictLabel : "暂无信息";
    },
    handleAddRowWithNull() {
      this.tableData.push({
        index: this.tableData.length + 1,
        status: "",
        name: "",
        deptId: "",
        type: "",
        explain: "",
        startTime: "",
        createTime: "",
        endTime: "",
        chargeUserId: "",
      });
    },
    stopTask(formName) {
      this.$refs[formName].validate((valid) => {
        if (valid) {
          controlTask({
            id: this.taskForm.id,
            operationType: 7,
          }).then((res) => {
            if (res.code) {
              this.$message({
                message: "终止成功",
                center: true,
                type: "success",
              });
            }
          });
        } else {
          // console.log("error submit!!");
          return false;
        }
      });
    },
    submitTask(formName) {
      this.$refs[formName].validate((valid) => {
        if (valid) {
          controlTask({
            id: this.taskForm.id,
            operationType: 5,
          }).then((res) => {
            if (res.code) {
              this.$message({
                message: "提交成功",
                center: true,
                type: "success",
              });
            }
          });
        } else {
          // console.log("error submit!!");
          return false;
        }
      });
    },
    startTask(formName) {
      this.$refs[formName].validate((valid) => {
        if (valid) {
          controlTask({
            id: this.taskForm.id,
            operationType: 2,
          }).then((res) => {
            if (res.code) {
              this.$message({
                message: "启动成功",
                center: true,
                type: "success",
              });
            }
          });
        } else {
          // console.log("error submit!!");
          return false;
        }
      });
    },
    sendTask(formName) {
      this.$refs[formName].validate((valid) => {
        if (valid) {
          controlTask({
            id: this.taskForm.id,
            operationType: 1,
          }).then((res) => {
            if (res.code) {
              this.$message({
                message: "下发成功",
                center: true,
                type: "success",
              });
            }
          });
        } else {
          // console.log("error submit!!");
          return false;
        }
      });
    },
    handleAdd(row) {
      // console.log(row);
      this.handleAddRowWithNull();
    },
    handleDelete(row) {
      this.$confirm("确认删除?", "提示", {
        confirmButtonText: "确定",
        cancelButtonText: "取消",
        type: "warning",
      })
        .then(() => {
          deleteTask(row.id).then((res) => {
            // console.log(res);
            if (res.code) {
              this.queryTable(this.parentCode);
              this.$message({
                message: "删除成功",
                center: true,
                type: "success",
              });
            }
          });
        })
        .catch(() => {});

      // console.log(row);
    },

    /**
     * 异步加载表格树
     * @param  {Object} tree //行数据
     * @param  {Object} treeNode //树节点层级数据
     * @param  {Function} resolve //回调渲染函数，传入渲染的list
     */
    load(tree, treeNode, resolve) {
      let temp = [];
      queryTableList(tree.code).then((res) => {
        // console.log(res);
        if (res.rows.length > 0) {
          for (let index in res.rows) {
            res.rows[index].index = ++index;
          }
        }
        temp = res.rows;
      });
      setTimeout(() => {
        resolve(temp);
      }, 1000);
    },
    dispassTask(formName) {
      this.$refs[formName].validate((valid) => {
        if (valid) {
          examineTask({
            id: this.taskForm.id,
            auditResult: 1,
            auditComment: this.approveForm.content,
          }).then((res) => {
            if (res.code) {
              this.$message({
                message: "通过成功",
                center: true,
                type: "success",
              });
            }
          });
        } else {
          // console.log("error submit!!");
          return false;
        }
      });
    },
    passTask(formName) {
      this.$refs[formName].validate((valid) => {
        if (valid) {
          examineTask({
            id: this.taskForm.id,
            auditResult: 0,
            auditComment: this.approveForm.content,
          }).then((res) => {
            if (res.code) {
              this.$message({
                message: "通过成功",
                center: true,
                type: "success",
              });
            }
          });
        } else {
          // console.log("error submit!!");
          return false;
        }
      });
    },
    submitForm(formName) {
      this.$refs[formName].validate((valid) => {
        if (valid) {
          alert("submit!");
        } else {
          // console.log("error submit!!");
          return false;
        }
      });
    },
    // 暂存
    saveTask(formName) {
      this.$refs[formName].validate((valid) => {
        if (valid) {
          insertTask(this.taskForm).then((res) => {
            // console.log(res);
            this.$message({
              message: "暂存成功",
              center: true,
              type: "success",
            });
          });
        } else {
          // console.log("error submit!!");
          return false;
        }
      });
    },

    //修改
    editTask(formName) {
      this.$refs[formName].validate((valid) => {
        if (valid) {
          updateTask(this.taskForm).then((res) => {
            this.queryForm(this.parentCode);
            this.$message({
              message: "修改成功",
              center: true,
              type: "success",
            });
          });
        } else {
          // console.log("error submit!!");
          return false;
        }
      });
    },
    resetForm(formName) {
      this.$refs[formName].resetFields();
    },

    /**
     * 查询表单详情
     * @param {String} code
     */
    queryForm(code) {
      queryTaskDetail(code).then((res) => {
        // console.log(res);
        res.status =
          res.status === 0 ? "0" : res.status ? res.status.toString() : "";
        res.type = res.type === 0 ? "0" : res.type ? res.type.toString() : "";
        // res.deptId = res.deptId.toString();
        this.taskForm = res;
        this.title = res.name;
        // console.log(this.taskForm);
      });
    },
    queryTable(code) {
      queryTableList(code).then((res) => {
        // console.log(res);
        for (let index in res.rows) {
          res.rows[index].index = ++index;
        }
        this.tableData = res.rows;
        this.handleAddRowWithNull();
      });
    },
  },
  created() {
    eventBus.$on("transmitKey" + this.tabDictValue, (code) => {
      if (code) {
        this.parentCode = code;
        this.queryForm(code);
        this.queryTable(code);
        this.handleQueryAuth(code);
      } else {
        this.taskForm = {
          status: "",
          name: "",
          deptId: "",
          type: "",
          explain: "",
          startTime: "",
          createTime: "",
          endTime: "",
          chargeUserId: "",
        };
        this.tableData = [];
        this.handleAddRowWithNull();
        this.title = "新增任务";
      }
      this.showForm = true;
    });
  },
  mounted() {},
  beforeDestroy() {
    eventBus.$off("transmitKey" + this.tabDictValue, undefined);
  },
  watch: {
    "form.id": {
      handler(nval, oval) {
        if (nval != oval) {
          this.$refs["taskForm"].resetFields();
          this.$refs["approveForm"].resetFields();
        }
      },
      deep: true,
    },
  },
};
</script>

<style scoped lang="less">
.title-box {
  overflow: hidden;
  margin-bottom: 20px;
  .point-box {
    display: inline-block;
    width: 8px;
    height: 8px;
    border-radius: 50%;
    background-color: #329dfa;
    margin: 0 10px 0 20px;
  }
  .title {
    font-size: 16px;
  }
  .el-divider--horizontal {
    width: 97%;
    margin: 10px auto;
    justify-content: center;
  }
}
</style>
