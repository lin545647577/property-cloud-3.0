<template>
  <div>
    <div class="search-box">
      <el-row :gutter="10" class="vertical-middle">
        <el-col :span="2" class="text-right vertical-middle">
          <div class="grid-content el-line-height">名称：</div>
        </el-col>
        <el-col :span="5" class="vertical-middle">
          <div class="grid-content">
            <el-input v-model="searchName" placeholder="请输入内容"></el-input>
          </div>
        </el-col>

        <el-col :span="3" class="vertical-middle">
          <div class="grid-content text-right">
            <el-button
              size="small"
              class="search-btn"
              type="primary"
              @click="queryList((currentPage = 1))"
              :style="{ 'background-color': themeColor }"
              >搜索
            </el-button>
          </div>
        </el-col>
      </el-row>
    </div>
    <div class="btn-box">
      <!--      <el-button-->
      <!--          size="small"-->
      <!--          class="control-btn"-->
      <!--          type="primary"-->
      <!--          @click="handleInsert(false)"-->
      <!--          :style="{ 'background-color': themeColor }"-->
      <!--      >新增-->
      <!--      </el-button>-->
      <el-button
        size="small"
        class="control-btn"
        type="primary"
        @click="handleExport"
        :style="{ 'background-color': themeColor }"
        >导出
      </el-button>
      <el-button
        size="small"
        class="control-btn"
        type="danger"
        @click="handleDeletes"
        >删除
      </el-button>
    </div>
    <el-table
      border
      ref="multipleTable"
      :data="tableData"
      tooltip-effect="dark"
      style="width: 100%"
      @selection-change="handleSelectionChange"
    >
      <el-table-column type="selection"></el-table-column>
      <el-table-column label="序号" prop="index" width="60"></el-table-column>
      <el-table-column label="姓名" prop="memberName" show-overflow-tooltip>
      </el-table-column>
      <el-table-column prop="buildingName" label="楼宇" show-overflow-tooltip>
      </el-table-column>
      <el-table-column prop="consumer" label="物业" show-overflow-tooltip>
      </el-table-column>
      <el-table-column label="电话" prop="phone" show-overflow-tooltip>
      </el-table-column>
      <el-table-column prop="month" label="月份"> </el-table-column>
      <el-table-column prop="amountYuan" label="金额"> </el-table-column>
      <el-table-column label="状态" width="60">
        <template slot-scope="scope">{{
          scope.row.status == "build" ? "创建" : "发布"
        }}</template>
      </el-table-column>
      <el-table-column label="支付状态">
        <template slot-scope="scope">{{
          scope.row.payStatus ? "已支付" : "未支付"
        }}</template>
      </el-table-column>
      <el-table-column label="操作" width="150">
        <template slot-scope="scope">
          <el-button
            type="text"
            size="mini"
            @click="handleEdit(false, scope.row)"
            >修改金额</el-button
          >
          <el-button type="text" size="mini" @click="handlePay(scope.row)"
            >支付</el-button
          >
          <el-button size="mini" type="text" @click="handleDelete(scope.row)"
            >删除</el-button
          >
        </template>
      </el-table-column>
    </el-table>

    <div class="block pagination-center">
      <el-pagination
        @size-change="handleSizeChange"
        @current-change="handleCurrentChange"
        :current-page="currentPage"
        :page-sizes="pageSizes"
        :page-size="pageSize"
        layout="total, sizes, prev, pager, next, jumper"
        :total="total"
      >
      </el-pagination>
    </div>
    <li-modal style="min-width: 1200px" ref="editModal" />
  </div>
</template>

<script>
import {
  queryOwnerBillList,
  exportOwnerBillList,
  deleteOwnerBill,
} from "@/api/payment.js";
import { resolveBlob } from "@/utils/util.js";

export default {
  name: "billDetailModal",
  props: {
    params: {
      type: Object,
      required: true,
    },
  },
  data() {
    return {
      searchName: "",
      tableData: [],
      multipleSelection: [],
      currentPage: 1,
      pageSizes: [10, 20, 50, 100],
      pageSize: 10,
      total: 0,
      ids: "",
      isRelease: false,
    };
  },
  methods: {
    /**
     * 支付操作
     * @param {Object} row
     */
    handlePay(row) {
      // console.log(row);
      if (row.status === "build") {
        this.$message({
          message: "该费未发布",
          center: true,
          type: "warning",
        });
        return;
      }
      if (row.payStatus) {
        this.$message({
          message: "该费用已支付",
          center: true,
          type: "warning",
        });
        return;
      }
      this.$refs["editModal"].show({
        view: "payment/bill/bill/payModal.vue",
        params: { id: row.id },
        title: "支付账单",
        center: true,
        top: "5vh",
        hideSubmitButton: true,
        hideCancelButton: true,
        submit: this.modalCallFunction,
      });
    },
    /**
     * 导出信息
     */
    handleExport() {
      this.$confirm("是否导出全部数据?", "提示", {
        confirmButtonText: "确定",
        cancelButtonText: "取消",
        type: "warning",
      })
        .then(() => {
          this.fullscreenLoading = true;
          exportOwnerBillList({ name: this.searchName }).then((res) => {
            this.$message({
              message: "操作成功",
              center: true,
              type: "success",
            });
            resolveBlob(res, res.type);
            this.fullscreenLoading = false;
          });
        })
        .catch(() => {
          this.$message({
            type: "info",
            message: "已取消",
          });
        });
    },
    //表格选择
    handleSelectionChange(val) {
      // console.log(val)
      this.multipleSelection = val;
      let tempArr = [];
      for (let index in val) {
        if (val[index].status === "release") {
          this.isRelease = true;
        }
        tempArr.push(val[index].id);
      }
      this.ids = tempArr.toString();
      // console.log("表格选择",this.ids);
    },
    /**
     * 删除
     * @param {String} ids
     */
    handleDeletes() {
      // console.log("ids:", this.isRelease);
      if (!this.ids) {
        this.$message({
          message: "请勾选内容",
          center: true,
          type: "warning",
        });
        return;
      } else if (this.isRelease) {
        this.$message({
          message: "该费用已发布",
          center: true,
          type: "warning",
        });
        return;
      }

      this.$confirm("确认删除?", "提示", {
        confirmButtonText: "确定",
        cancelButtonText: "取消",
        type: "warning",
      })
        .then(() => {
          deleteOwnerBill(this.ids).then((res) => {
            this.$message({
              message: "操作成功",
              center: true,
              type: "success",
            });
            this.queryList(this.currentPage);
          });
        })
        .catch(() => {
          this.$message({
            type: "info",
            message: "已取消删除",
          });
        });
    },

    /**
     * 查看操作
     * @param {boolean} checkInfo
     * @param {Object} row
     */
    handleCheck(checkInfo, row) {
      // console.log(row);
      this.$refs["editModal"].show({
        view: "payment/bill/managerBill/editModal.vue",
        params: { checkInfo: checkInfo, id: row.id },
        title: "查看账单",
        center: true,
        top: "5vh",
        hideSubmitButton: true,
        hideCancelButton: true,
      });
    },

    /**
     *modal回调
     */
    modalCallFunction() {
      this.queryList(this.currentPage);
      this.$refs["editModal"].hide();
    },

    /**
     * 编辑操作
     * @param {boolean} checkInfo
     * @param {Object} row
     */
    handleEdit(checkInfo, row) {
      // console.log( row);
      if (row.status === "release") {
        this.$message({
          message: "该账单已发布，不能修改",
          center: true,
          type: "success",
        });
        return;
      }

      this.$refs["editModal"].show({
        view: "payment/bill/bill/editDetailModal.vue",
        params: { checkInfo: checkInfo, id: row.id },
        title: "编辑账单",
        center: true,
        top: "5vh",
        hideSubmitButton: true,
        hideCancelButton: true,
        submit: this.modalCallFunction,
      });
    },

    /**
     * 新增操作
     * @param {boolean} checkInfo
     * @param {Object} row
     */
    handleInsert(checkInfo, row) {
      // console.log(index, row);
      this.$refs["editModal"].show({
        view: "payment/bill/managerBill/editModal.vue",
        params: { checkInfo: checkInfo },
        title: "新增账单",
        center: true,
        top: "5vh",
        hideSubmitButton: true,
        hideCancelButton: true,
        submit: this.modalCallFunction,
      });
    },
    /**
     * 删除
     * @param {Object} row
     */
    handleDelete(row) {
      if (row.status === "release") {
        this.$message({
          message: "该费用已发布",
          center: true,
          type: "warning",
        });
        return;
      }
      // console.log(ids);
      this.$confirm("确认删除?", "提示", {
        confirmButtonText: "确定",
        cancelButtonText: "取消",
        type: "warning",
      })
        .then(() => {
          deleteOwnerBill(this.ids).then((res) => {
            this.$message({
              message: "操作成功",
              center: true,
              type: "success",
            });
            this.queryList(this.currentPage);
          });
        })
        .catch(() => {
          this.$message({
            type: "info",
            message: "已取消删除",
          });
        });
    },

    //每页显示条数
    handleSizeChange(val) {
      // console.log(`每页 ${val} 条`);
      this.pageSize = val;
      this.queryList((this.currentPage = 1));
    },

    // 分页
    handleCurrentChange(val) {
      this.queryList((this.currentPage = val));
    },

    queryList(currentPage) {
      // console.log(this.searchName);
      queryOwnerBillList({
        pageNum: currentPage,
        pageSize: this.pageSize,
        memberName: this.searchName,
        referenceTotalBillId: this.params.id,
      }).then((res) => {
        // console.log(res);
        for (let index in res.rows) {
          res.rows[index].index =
            parseInt(index) + 1 + (this.currentPage - 1) * this.pageSize;
        }
        this.tableData = res.rows;
        this.total = res.total;
      });
    },
  },
  mounted() {
    this.queryList(this.currentPage);
  },
  computed: {
    themeColor() {
      return this.$store.state.app.themeColor;
    },
  },
};
</script>

<style scoped>
.explain-boxes {
  margin-bottom: 20px;
}

.explain-box {
  border: 1px solid #dcdfe6;
  text-align: center;
  padding: 10px 5px;
  font-weight: 400;
  margin: 10px auto;
  border-radius: 5px;
  background-color: #f2fffd;
}

.mini-table {
  margin: 20px auto 0 auto;
  width: 67%;
}

.search-box {
  margin: 20px auto;
}

.control-btn {
  color: #ffffff;
}
</style>
